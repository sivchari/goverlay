package main

import (
	"bufio"
	"errors"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io"
	"log/slog"
	"os"
	"strings"
	"testing"

	"github.com/goccy/go-yaml"
	"github.com/sivchari/goverlay/internal"
	"github.com/spf13/cobra"
	"golang.org/x/tools/go/ast/astutil"
)

var (
	config string
)

var goverlayCmd = &cobra.Command{
	Use:   "goverlay",
	Short: "goverlay is a tool to generate overlayed code",
	Long: `goverlay is a tool to generate overlayed code
It takes a configuration file and generates a new file with the overlayed code`,
	RunE: rune,
}

func init() {
	goverlayCmd.Flags().StringVarP(&config, "config", "c", "goverlay.yaml", "Path to the configuration file")
}

func main() {
	if err := goverlayCmd.Execute(); err != nil {
		slog.Error("failed to generate overlayed code", "error", err)
	}
}

func rune(cmd *cobra.Command, args []string) error {
	b, err := os.ReadFile(config)
	if err != nil {
		return err
	}
	var cfg internal.Config
	if err := yaml.Unmarshal(b, &cfg); err != nil {
		return err
	}
	if err := os.Remove(cfg.Dist); err != nil {
		if !errors.Is(err, os.ErrNotExist) {
			return err
		}
	}
	var w io.Writer
	if testing.Testing() {
		w = os.Stdout
	} else {
		f, err := os.Create(cfg.Dist)
		if err != nil {
			return err
		}
		defer f.Close()
		w = f
	}
	fset := token.NewFileSet()
	p, err := parser.ParseFile(fset, cfg.From, nil, parser.ParseComments)
	if err != nil {
		return err
	}
	for _, r := range cfg.Replaces {
		switch r.Kind {
		case "func":
			astutil.Apply(p, func(c *astutil.Cursor) bool {
				if fn, ok := c.Node().(*ast.FuncDecl); ok {
					if fn.Name.Name == r.Ident {
						// Replace the function
						fn.Name.Name = "_" + fn.Name.Name
					}
				}
				return true
			}, nil)
		case "struct":
			astutil.Apply(p, func(c *astutil.Cursor) bool {
				if st, ok := c.Node().(*ast.TypeSpec); ok {
					if st.Name.Name == r.Ident {
						// Replace the struct
						st.Name.Name = "_" + st.Name.Name
					}
				}
				return true
			}, nil)
		default:
			panic("unsupported kind")
		}
	}
	if err := format.Node(w, fset, p); err != nil {
		return err
	}
	fmt.Fprint(w, "\n// Code generated by goverlay; DO NOT EDIT.\n")
	patch, err := os.ReadFile(cfg.Patch)
	if err != nil {
		return err
	}
	var str strings.Builder
	scanner := bufio.NewScanner(strings.NewReader(string(patch)))
	for scanner.Scan() {
		line := scanner.Text()
		if !strings.HasPrefix(line, "package") {
			str.WriteString(line + "\n")
		}
	}
	formatted, err := format.Source([]byte(str.String()))
	if err != nil {
		return err
	}
	fmt.Fprint(w, fmt.Sprintf("%s\n", string(formatted)))
	return nil
}
